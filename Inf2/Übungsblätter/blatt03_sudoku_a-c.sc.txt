// Aufgabe 2
type Perm = Array[Int]
type Sudoku = Array[Array[Int]]

// Hilfsfunktion zur Ausgabe der Sudokus
def printSudoku(s: Sudoku): Unit = {
  for (i <- 0 to 8) {
    print('┃')
    for (j <- 0 to 8) {
      print(s"${s(i)(j)}")
      if (j % 3 == 2) print('┃') else print('│')
    }
    print('\n')
  }
  print('\n')
}

// Aus der Vorlesung
def wendeAn(p: Perm, q: Perm): Perm =
  Array.tabulate(p.length)((i) => p(q(i)))

// Aus der Vorlesung
def invers(p: Perm): Perm = {
  var Erg = new Array[Int](p.length)
  for (i <- (0 to p.length - 1)) Erg(p(i)) = i
  return Erg
}

// Teilaufgabe a
def gleich(s1: Sudoku, s2: Sudoku): Boolean = {
  for (i <- 0 to 8)
    for (j <- 0 to 8)
      if (!(s1(i)(j) == s2(i)(j)))
        return false
  return true
}

// Teilaufgabe b
def wendeAuf(p: Perm, s: Sudoku): Sudoku = {
  Array.tabulate(9, 9)((r, c) => p(s(r)(c)))
}

// Teilaufgabe c
def existiertPerm(s1: Sudoku, s2: Sudoku): Boolean = {
  val q = wendeAn(s2(0), invers(s1(0)))
  val permutiert = wendeAuf(q, s1)
  println("Zwischenschritt in existiertPerm:")
  printSudoku(permutiert)
  return gleich(s2, permutiert)
}

// Sudoku aus den Vorlesungsfolien
val sudoku1: Sudoku = Array(
  Array(4, 5, 1, 8, 7, 3, 2, 6, 0),
  Array(6, 7, 3, 0, 2, 4, 8, 1, 5),
  Array(8, 2, 0, 5, 6, 1, 3, 4, 7),
  Array(2, 0, 8, 4, 1, 7, 6, 5, 3),
  Array(5, 1, 6, 2, 3, 8, 0, 7, 4),
  Array(7, 3, 4, 6, 5, 0, 1, 8, 2),
  Array(3, 6, 7, 1, 4, 2, 5, 0, 8),
  Array(1, 8, 2, 7, 0, 5, 4, 3, 6),
  Array(0, 4, 5, 3, 8, 6, 7, 2, 1)
)

// Ganzes Sudoku 1 Permuitert
val sudoku2: Sudoku = wendeAuf(Array(2, 1, 0, 3, 5, 4, 8, 7, 6), sudoku1)

// Anderes Sudoku, das nicht durch eine
// Permutation in Sudoku 1 überführt werden kann
val sudoku3: Sudoku = Array(
  Array(9, 5, 7, 6, 1, 3, 2, 8, 4),
  Array(4, 8, 3, 2, 5, 7, 1, 9, 6),
  Array(6, 1, 2, 8, 4, 9, 5, 3, 7),
  Array(1, 7, 8, 3, 6, 4, 9, 5, 2),
  Array(5, 2, 4, 9, 7, 1, 3, 6, 8),
  Array(3, 6, 9, 5, 2, 8, 7, 4, 1),
  Array(8, 4, 5, 7, 9, 2, 6, 1, 3),
  Array(2, 9, 1, 4, 3, 6, 8, 7, 5),
  Array(7, 3, 6, 1, 8, 5, 4, 2, 9)
)

println("Sudoku 1")
printSudoku(sudoku1)

println("Sudoku 2")
printSudoku(sudoku2)

existiertPerm(sudoku1, sudoku2)

println("Sudoku 1")
printSudoku(sudoku1)

println("Sudoku 3")
printSudoku(sudoku3)

existiertPerm(sudoku1, sudoku3)

